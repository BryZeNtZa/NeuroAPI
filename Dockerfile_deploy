#####################################################################################
# Build the first stage for deployemnt to be able to pull dependencies via composer #
#####################################################################################
FROM php:7.4-fpm as intermediate

ARG PSR_VERSION=1.0.1
ARG PHALCON_VERSION=4.1.0
ARG PHALCON_EXT_PATH=php7/64bits

# add basic tools
RUN set -e; \
    apt-get update; \
    apt-get install -y --no-install-recommends ssh bash vim git unzip libyaml-dev;

# Install from PECL: Yaml Redis xdebug and xml
RUN apt-get install -y libyaml-dev libxml2-dev \
    && pecl install yaml \
    && pecl install psr \
    && pecl install redis \
    && docker-php-ext-enable yaml psr redis

# Install SOAP
RUN docker-php-ext-install soap && docker-php-ext-enable soap

# Add phalcon toolkit
RUN set -xe && \
        # Compile Phalcon
        curl -LO https://github.com/phalcon/cphalcon/archive/v${PHALCON_VERSION}.tar.gz && \
        tar xzf ${PWD}/v${PHALCON_VERSION}.tar.gz && \
        docker-php-ext-install -j $(getconf _NPROCESSORS_ONLN) ${PWD}/cphalcon-${PHALCON_VERSION}/build/${PHALCON_EXT_PATH} && \
        # Remove all temp files
        rm -r \
            ${PWD}/v${PHALCON_VERSION}.tar.gz \
            ${PWD}/cphalcon-${PHALCON_VERSION} \
            rm -rf v${PHALCON_VERSION}.tar.gz;

# Install Composer
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Setup document root
RUN mkdir -p /app

# Add composer files needed for vendoring
COPY  composer.json /app/composer.json
COPY  composer.lock /app/composer.lock

# Set Workdir to new app folder
WORKDIR /app

# add credentials on build
RUN mkdir -p /root/.ssh  ; \
    touch /root/.ssh/known-hosts
COPY key /root/.ssh/id_rsa
RUN chmod 600 /root/.ssh/id_rsa ; \
    ssh-keyscan bitbucket.org >> /root/.ssh/known_hosts

# pull in dependencies
RUN composer --working-dir=/app install -o --no-dev

####################################################################
# Build the second stage for deployemnt - without the injected key #
####################################################################
FROM php:7.4-fpm

# copy the repository form the previous image
COPY --from=intermediate /app /app

ARG PSR_VERSION=1.0.1
ARG PHALCON_VERSION=4.1.0
ARG PHALCON_EXT_PATH=php7/64bits

ENV DEBIAN_FRONTEND=noninteractive

# https://stackoverflow.com/questions/61815233/install-java-runtime-in-debian-based-docker-image
RUN mkdir -p /usr/share/man/man1 /usr/share/man/man2

# add basic tools
RUN set -e; \
    apt-get update; \
    apt-get upgrade -y --no-install-recommends; \
    apt-get auto-remove -y; \
    apt-get install -y --no-install-recommends ssh bash vim git unzip nginx supervisor cron;

# Add phalcon toolkit
RUN set -xe && \
        # Compile Phalcon
        curl -LO https://github.com/phalcon/cphalcon/archive/v${PHALCON_VERSION}.tar.gz && \
        tar xzf ${PWD}/v${PHALCON_VERSION}.tar.gz && \
        docker-php-ext-install -j $(getconf _NPROCESSORS_ONLN) ${PWD}/cphalcon-${PHALCON_VERSION}/build/${PHALCON_EXT_PATH} && \
        # Remove all temp files
        rm -r \
            ${PWD}/v${PHALCON_VERSION}.tar.gz \
            ${PWD}/cphalcon-${PHALCON_VERSION} \
            rm -rf v${PHALCON_VERSION}.tar.gz;

# Install from PECL: Yaml Redis SOAP
RUN apt-get install -y libyaml-dev \
    && pecl install yaml \
    && pecl install redis \
    && pecl install psr \
    && docker-php-ext-enable yaml redis psr \
    && docker-php-ext-install mysqli sockets pdo pdo_mysql \
    && docker-php-ext-enable pdo_mysql \
    && apt-get install -y libxml2-dev

# Install SOAP
RUN docker-php-ext-install soap && docker-php-ext-enable soap

# Install Composer
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Install packages and remove default server definition
RUN rm /etc/nginx/sites-available/default  ; \
    rm /etc/nginx/sites-enabled/default

# Configure cron
COPY docker/crontab /etc/cron/crontab

# Init cron
RUN crontab /etc/cron/crontab

# Configure nginx
COPY docker/nginx.conf /etc/nginx/nginx.conf

# Configure PHP-FPM
COPY docker/fpm-pool.conf /usr/local/etc/php-fpm.conf
COPY docker/php.ini /etc/php7/conf.d/custom.ini

# Configure supervisord
COPY docker/supervisord.conf /etc/supervisor/supervisord.conf

# Set Workdir to new app folder
WORKDIR /app

# copy original code from source
COPY  app/ /app/app
COPY  bin/ /app/bin
COPY  config/ /app/config
COPY  public/ /app/public
COPY  src/ /app/src
COPY  migrations/ /app/migrations

# Expose the port nginx is reachable on
EXPOSE 80

# Trigger entrypoint script
COPY docker/docker-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh
RUN ln -s /usr/local/bin/docker-entrypoint.sh / # backwards compat
CMD ["docker-entrypoint.sh"]

# Configure a healthcheck to validate that everything is up&running
HEALTHCHECK --timeout=3s --start-period=3s --retries=1  CMD /usr/local/bin/php /app/app/cli.php Checkconfiguration > /proc/1/fd/1 2>&1
